<iframe
  src="data:text/html;base64,"
  style={{ border: 0, margin: 0, width: 3840, height: 2160 }}
/>;
